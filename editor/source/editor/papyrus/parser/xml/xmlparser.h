//
// jsonparser.h
//
// This file defines a class for loading JSON files using the rapidjson library.
//
// rapidxml License
//Use of this software is granted under one of the following two licenses,
//to be chosen freely by the user.
//
//	1. Boost Software License - Version 1.0 - August 17th, 2003
//	===============================================================================
//	
//	Copyright (c) 2006, 2007 Marcin Kalicinski
//	
//	Permission is hereby granted, free of charge, to any person or organization
//	obtaining a copy of the software and accompanying documentation covered by
//	this license (the "Software") to use, reproduce, display, distribute,
//	execute, and transmit the Software, and to prepare derivative works of the
//	Software, and to permit third-parties to whom the Software is furnished to
//	do so, all subject to the following:
//	
//	The copyright notices in the Software and this entire statement, including
//	the above license grant, this restriction and the following disclaimer,
//	must be included in all copies of the Software, in whole or in part, and
//	all derivative works of the Software, unless such copies or derivative
//	works are solely in the form of machine-executable object code generated by
//	a source language processor.
//	
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//	DEALINGS IN THE SOFTWARE.
//	
//	2. The MIT License
//	===============================================================================
//	
//	Copyright (c) 2006, 2007 Marcin Kalicinski
//	
//	Permission is hereby granted, free of charge, to any person obtaining a copy 
//	of this software and associated documentation files (the "Software"), to deal 
//	in the Software without restriction, including without limitation the rights 
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
//	of the Software, and to permit persons to whom the Software is furnished to do so, 
//	subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in all 
//	copies or substantial portions of the Software.
//	
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
//	THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
//	IN THE SOFTWARE.
#pragma once

#ifndef __PAPYRUS_FILEPARSER_XML_H__
#define __PAPYRUS_FILEPARSER_XML_H__

// Library Includes
#include <fstream>

// Local Includes
#include "..\iparser.h"
#include "rapidxml\rapidxml.hpp"

namespace Papyrus
{
	namespace FileParser
	{
		class CXMLParser : public IParser
		{
			// Member Functions
		public:
			CXMLParser();
			virtual ~CXMLParser();

			virtual Bool Initialise(const Int8* _path, Bool _create = false);
			virtual Bool ShutDown();

			virtual Bool Load(const Int8* _path = 0);
			virtual Bool Save(const Int8* _path = 0);

			virtual Bool AddValue(const Int8* _key, const Bool _value, const Int8* _section = 0);
			virtual Bool AddValue(const Int8* _key, const Int8* _value, const Int8* _section = 0);
			virtual Bool AddValue(const Int8* _key, Int32 _value, const Int8* _section = 0);
			virtual Bool AddValue(const Int8* _key, UInt32 _value, const Int8* _section = 0);
			virtual Bool AddValue(const Int8* _key, Float32 _value, const Int8* _section = 0);
			virtual Bool AddValue(const Int8* _key, const VECTOR3& _value, const Int8* _section = 0);
			virtual Bool AddValue(const Int8* _key, const VECTOR4& _value, const Int8* _section = 0);

			virtual Bool DeleteValue(const Int8* _key, const Int8* _section = 0);

			virtual Bool GetValue(const Int8* _key, Bool& _value, const Int8* _section = 0);
			virtual Bool GetValue(const Int8* _key, Int8** _value, const Int8* _section = 0);
			virtual Bool GetValue(const Int8* _key, Int32& _value, const Int8* _section = 0);
			virtual Bool GetValue(const Int8* _key, UInt32& _value, const Int8* _section = 0);
			virtual Bool GetValue(const Int8* _key, Float32& _value, const Int8* _section = 0);
			virtual Bool GetValue(const Int8* _key, VECTOR2& _value, const Int8* _section = 0);
			virtual Bool GetValue(const Int8* _key, VECTOR3& _value, const Int8* _section = 0);
			virtual Bool GetValue(const Int8* _key, VECTOR4& _value, const Int8* _section = 0);

			// Member Variables
		private:
			rapidxml::xml_document<>		m_xml;
			fstream							m_filestream;
			// m_strXml is used to hold string when parsing.
			// Otherwise m_xml is filled with junk once the Load function finishes as everything goes out of scope.
			string							m_strXml;
		};
	}
}

#endif //__PAPYRUS_FILEPARSER_XML_H__